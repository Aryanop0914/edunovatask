const express = require("express");
const router = express.Router();
const {
  updateIssueDate,
  updateReturnDate,
  getPeopleCountStatusIfNotIssued,
  totalRentGeneratedByBook,
  getAllBookIssuedByUser,
  getAllBookInDateRange,
} = require("../controllers/transaction.controller.js");

/**
 * @swagger
 * /api/transactions/updateIssueDate:
 *   post:
 *     summary: Update the issue date of a book
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               book_name:
 *                 type: string
 *                 description: The name of the book
 *               user_id:
 *                 type: string
 *                 description: The ID of the user
 *               issueDate:
 *                 type: string
 *                 format: date
 *                 description: The new issue date
 *     responses:
 *       200:
 *         description: Issue date updated successfully
 *       400:
 *         description: Invalid input
 *       500:
 *         description: Server error
 */
router.post("/updateIssueDate", updateIssueDate);

/**
 * @swagger
 * /api/transactions/updateReturnDate:
 *   post:
 *     summary: Update the return date of a book
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               book_name:
 *                 type: string
 *                 description: The name of the book
 *               user_id:
 *                 type: string
 *                 description: The ID of the user
 *               returnDate:
 *                 type: string
 *                 format: date
 *                 description: The new return date
 *     responses:
 *       200:
 *         description: Return date updated successfully
 *       400:
 *         description: Invalid input
 *       500:
 *         description: Server error
 */
router.post("/updateReturnDate", updateReturnDate);

/**
 * @swagger
 * /api/transactions/getPeopleCountStatusIfNotIssued:
 *   post:
 *     summary: Get the count of people with books not issued
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               book_name:
 *                 type: string
 *                 description: The name of the book
 *     responses:
 *       200:
 *         description: People count retrieved successfully
 *       400:
 *         description: Invalid input
 *       500:
 *         description: Server error
 */
router.post(
  "/getPeopleCountStatusIfNotIssued",
  getPeopleCountStatusIfNotIssued
);

/**
 * @swagger
 * /api/transactions/totalRentGeneratedByBook:
 *   post:
 *     summary: Get total rent generated by a specific book
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               book_name:
 *                 type: string
 *                 description: The name of the book
 *     responses:
 *       200:
 *         description: Total rent retrieved successfully
 *       400:
 *         description: Invalid input
 *       500:
 *         description: Server error
 */
router.post("/totalRentGeneratedByBook", totalRentGeneratedByBook);

/**
 * @swagger
 * /api/transactions/getAllBookIssuedByUser:
 *   post:
 *     summary: Get all books issued by a specific user
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               user_id:
 *                 type: string
 *                 description: The ID of the user
 *     responses:
 *       200:
 *         description: Books retrieved successfully
 *       400:
 *         description: Invalid input
 *       500:
 *         description: Server error
 */
router.post("/getAllBookIssuedByUser", getAllBookIssuedByUser);

/**
 * @swagger
 * /api/transactions/getAllBookInDateRange:
 *   post:
 *     summary: Get all books issued in a specific date range
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               min_issue_date:
 *                 type: string
 *                 format: date
 *                 description: The start date of the range
 *               max_issue_date:
 *                 type: string
 *                 format: date
 *                 description: The end date of the range
 *     responses:
 *       200:
 *         description: Books retrieved successfully
 *       400:
 *         description: Invalid input
 *       500:
 *         description: Server error
 */
router.post("/getAllBookInDateRange", getAllBookInDateRange);

module.exports = router;
